---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by babybus.
--- DateTime: 2024/3/13 09:41
---

-- 添加同一目录下的文件
json = require("json")

function clone(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for key, value in pairs(object) do
            new_table[_copy(key)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end

function split(str, delim, maxNb)
    str   = tostring(str)
    delim = tostring(delim)

    -- Eliminate bad cases...
    if string.find(str, delim) == nil then
        return { str }
    end
    if maxNb == nil or maxNb < 1 then
        maxNb = 0    -- No limit
    end

    local result = {}
    local pat = "(.-)" .. delim .. "()"
    local nb = 0
    local lastPos
    for part, pos in string.gmatch(str, pat) do
        nb = nb + 1
        result[nb] = part
        lastPos = pos
        if nb == maxNb then break end
    end
    -- Handle the last field
    if nb ~= maxNb then
        result[nb + 1] = string.sub(str, lastPos)
    end

    return result
end

function isnumber(v)
    return type(v) == "number"
end



-- 添加同一目录下的文件
local  AccountDataHandle = require("AccountDataHandle")


function removePrefixUpToFirstUnderscore(input)
    local underscorePos = string.find(input, "_")
    if underscorePos then
        return string.sub(input, underscorePos + 1)
    else
        return input -- 如果没有"_"，返回原始输入
    end
end


function dataConversion(name)
	print("dataConversion")

	local data = AccountDataHandle:uncompressAccountData(json.decode(name))
	local xmlStr = ""

	xmlStr = xmlStr .. "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
	xmlStr = xmlStr .."<userDefaultRoot>\n"
	xmlStr = xmlStr .. "<USTORE_TABLE_FOR_CLEAR>{\"bb_parent\":["

	-- for key in data:
	-- # 使用 partition 方法分割字符串，并取第三个元素
	-- key = key.partition("_")[2]
	-- xmlStr += "\"" + key + "\","



	if not data then
		return "错误"
	end
	for i, item in pairs(data) do
		-- # 分割字符串，并取第三个元素
		i = removePrefixUpToFirstUnderscore(i)
		xmlStr = xmlStr .. "\"" .. i .. "\","
	end
	xmlStr = xmlStr:sub(1, -2)
	xmlStr = xmlStr .. "]}</USTORE_TABLE_FOR_CLEAR>\n"

	for i, item in pairs(data) do
		xmlStr = xmlStr .. "<" .. removePrefixUpToFirstUnderscore(i) .. ">" .. data[i] .. "</" .. removePrefixUpToFirstUnderscore(i) .. ">\n"
	end
	xmlStr = xmlStr .. "</userDefaultRoot>"

	--for key in data:
	--    xmlStr += "\"" + key + "\","
	--    #最后一个不加，
	--xmlStr = xmlStr[:-1]
	--xmlStr += "]}</USTORE_TABLE_FOR_CLEAR>\n"
	--for key in data:
	--    xmlStr += "<" + key + ">" + data[key] + "</" + key + ">\n"
	--xmlStr += "</userDefaultRoot>"

	return xmlStr

end